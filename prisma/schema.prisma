generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Required by NextAuth
model Account {
    id                 String  @id @default(cuid())
    userId             Int     @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Required by NextAuth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required by NextAuth
model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    image         String?
    emailVerified DateTime? @map(name: "emailVerified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")

    accounts       Account[]
    sessions       Session[]
    chatbots       ChatBot[]
    chats          Chat[]
    favorites      FavoriteChatBot[]
    ChatBotRatings ChatBotRating[]

    @@map(name: "users")
}

model ChatBot {
    id          String   @id @default(cuid())
    name        String
    description String
    categories  String[] @default([])
    featured    Boolean  @default(false)
    createdAt   DateTime @default(now()) @map(name: "created_at")

    model          String
    systemMessage  String?
    temperature    Float   @default(0.7)
    frequency_bias Float   @default(0.0)
    presence_bias  Float   @default(0.0)

    published PublishedChatBot?

    chats     Chat[]
    favorites FavoriteChatBot[]

    author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int
}

model PublishedChatBot {
    chatbot ChatBot @relation(fields: [id], references: [id], onDelete: Cascade)
    id      String  @id

    ChatBotRatings ChatBotRating[]
    ratingsTotal   Int             @default(0)
    ratingsCount   Int             @default(0)
    rating         Float           @default(0.0)

    publishedAt DateTime @default(now()) @map(name: "published_at")
}

model FavoriteChatBot {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    chatbot   ChatBot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
    chatbotId String
    createdAt DateTime @default(now()) @map(name: "created_at")

    @@id([userId, chatbotId])
}

model ChatBotRating {
    chatbot   PublishedChatBot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
    chatbotId String
    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    rating    Int
    createdAt DateTime         @default(now()) @map(name: "created_at")

    @@id([chatbotId, userId])
}

model Chat {
    id           String        @id @default(cuid())
    name         String?
    messages     ChatMessage[]
    createdAt    DateTime      @default(now()) @map(name: "created_at")
    linkSharedAt DateTime? // If not null, the chat can be viewed by anyone with the link

    author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int

    chatbot   ChatBot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
    chatbotId String
}

model ChatMessage {
    id String @id @default(cuid())

    author    ChatMessageAuthor
    content   String
    streaming Boolean           @default(false)
    createdAt DateTime          @default(now()) @map(name: "created_at")

    chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId String
}

enum ChatMessageAuthor {
    USER
    CHATBOT
}
